#!/usr/bin/env bash

set -eo pipefail

DAPP_LIB=${DAPP_LIB:-lib}

config-init() {
  path=${DEPLOY_CONFIG:-$1}
  if [[ ! -e "$path" ]]; then
    echo "Config file not found: $path not found"
    exit 1
  fi
  export ADDRESSES_FILE=$path
  local exports
  exports=$(cat $path | jq -r ".deploy_data // . | \
    to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
  for e in $exports; do export "$e"; done
}

GREEN='\033[0;32m'
NC='\033[0m' # No Color

log() {
    printf '%b\n' "${GREEN}${1}${NC}"
    echo ""
}

info() {
  echo >&2 "${0##*/}: info: ${*:1}"
}

toUpper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

toLower() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

addAddress() {
    if [ -z "$1" ] || [ -z "$2" ] 
      then
        echo "addAddress: No argument supplied"
        exit 1
    fi
    cat "$ADDRESSES_FILE" | jq --arg key "$1" --arg value "$2" '.[$key] = $value' | sponge "$ADDRESSES_FILE"
    log "$1=$2"
}

loadAddresses() {
    local exports
    exports=$(cat $ADDRESSES_FILE | jq -r ".deploy_data // . | \
        to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
    for e in $exports; do export "$e"; done
}

if  [[ -e .env ]]; then
  . .env
fi

if [[ "$DEPLOY_CHAIN?" ]]; then  
  case "$DEPLOY_CHAIN" in
    ropsten)
      config-init "${PWD}/bin/addr/ropsten.json";
      ;;
    pangolin)
      config-init "${PWD}/bin/addr/pangolin.json";
      ;;
    hecotest)
      config-init "${PWD}/bin/addr/hecotest.json";
      ;;
    bsctest)
      config-init "${PWD}/bin/addr/bsctest.json";
      ;;
    *)
      (echo "Invalid DEPLOY_CHAIN"; exit 1)
  esac
fi


deployProxy() {
  set -e
  local lib; lib=$1
  local proxy; proxy=$2
  local class; class=$3
  local sig; sig=$4
  local calldata; calldata=$(seth calldata "$sig" ${@:5})
  local addr; addr=$(dappCreate "$lib" "$class")
  local proxyAddr; proxyAddr=$(dappProxy "$proxy" "$addr" "${EVOPROXYADMIN?}" "$calldata")
  echo "$proxyAddr"
}


dappCreate() {
  set -e
  local lib; lib=$1
  local class; class=$2
  local addr; addr=$(DAPP_OUT="$DAPP_LIB/$lib/out" dapp create "$class" "${@:3}")
  local name; name=${class#*:}
  addAddress "$name" "$addr" >/dev/null
  info "$name deployed at $addr"
  echo "$addr"
}

dappProxy() {
  set -e
  local class; class=$1
  local addr; addr=$(DAPP_OUT="./out" dapp create "$class" "${@:2}")
  local name; name=${class#*:}
  local proxy; proxy=$(toUpper "$name")
  proxy="${proxy%%"PROXY"}_PROXY"
  info "$proxy deployed at $addr"
  echo "$addr"
}

addressOf() {
  local id=$(seth --to-bytes32 $(seth --from-ascii "${1?}"))
  local addr=$(seth call "$SETTINGSREGISTRY" "addressOf(bytes32)(address)" "$id")
  echo "$(seth --to-checksum-address $addr)"
}

setAddress() {
  local id=$(seth --to-bytes32 $(seth --from-ascii "${1?}"))
  local addr="${2?}"
  seth send "${SETTINGSREGISTRY?}" "setAddressProperty(bytes32,address)" "$id" "$addr" 
  if test "$addr" != "$(addressOf $1)"; then 
    (echo "registry $1 failed!"; exit 1;)
  fi
  info "$1 regisered."
}

uintOf() {
  local id=$(seth --to-bytes32 $(seth --from-ascii "${1?}"))
  echo "$(seth call "$SETTINGSREGISTRY" "uintOf(bytes32)(uint256)" "$id")"
}

setUint() {
  set -e
  local id=$(seth --to-bytes32 $(seth --from-ascii "${1?}"))
  local addr="${2?}"
  seth send "${SETTINGSREGISTRY?}" "setUintProperty(bytes32,uint256)" "$id" "$addr" 
  if test "$addr" != "$(uintOf $1)"; then 
    (echo "registry $1 failed!"; exit 1;)
  fi
  info "$1 regisered."
}

register() {
  local t; t="$1"
  if test "$t" == "addr"; then
    setAddress "${@:2}"
  elif test "$t" == "uint"; then
    setUint "${@:2}"
  else
    (echo "registry $2 failed!"; exit 1;)
  fi
}


loadConf() {
  if [ -z "$1" ]  
    then
      echo "conf: Invalid key"
      exit 1
  fi
  local key; key=$1
  jq -r "${key}" "$CONFIG_FILE"
}

export CONFIG_FILE="${CONFIG_FILE-PWD/bin/conf/default.json}" 
