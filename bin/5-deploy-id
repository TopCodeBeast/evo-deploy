#!/usr/bin/env bash

set -e

. $(PWD)/bin/init

# DividendPool 
DIVIDENDPOOL=$(dapp create DividendPool)
cat $ADDRESSES_FILE | jq --arg key "DIVIDENDPOOL" --arg value "$DIVIDENDPOOL" '.[$key] = $value' | sponge $ADDRESSES_FILE

DIVIDENDPOOL_PROXY=$(dapp create DividendPoolProxy)
cat $ADDRESSES_FILE | jq --arg key "DIVIDENDPOOL_PROXY" --arg value "$DIVIDENDPOOL_PROXY" '.[$key] = $value' | sponge $ADDRESSES_FILE
echo >&2 "${0##*/}: info: DividendPoolProxy created."

calldata=$(seth calldata "initializeContract(address)" $SETTINGSREGISTRY)
seth send $DIVIDENDPOOL_PROXY "upgradeToAndCall(address,bytes)" $DIVIDENDPOOL $calldata 

echo >&2 "${0##*/}: info: DividendPoolProxy inited."

dividendPoolId=$(seth --to-bytes32 $(seth --to-hex $(seth --from-ascii "CONTRACT_DIVIDENDS_POOL")))
seth send $SETTINGSREGISTRY "setAddressProperty(bytes32,address)" $dividendPoolId $DIVIDENDPOOL_PROXY 

# FrozenDividend
FROZENDIVIDEND=$(dapp create FrozenDividend)
cat $ADDRESSES_FILE | jq --arg key "FROZENDIVIDEND" --arg value "$FROZENDIVIDEND" '.[$key] = $value' | sponge $ADDRESSES_FILE

FROZENDIVIDEND_PROXY=$(dapp create FrozenDividendProxy)
cat $ADDRESSES_FILE | jq --arg key "FROZENDIVIDEND_PROXY" --arg value "$FROZENDIVIDEND_PROXY" '.[$key] = $value' | sponge $ADDRESSES_FILE
echo >&2 "${0##*/}: info: FrozenDividendProxy created."

calldata=$(seth calldata "initializeContract(address)" $SETTINGSREGISTRY)
seth send $FROZENDIVIDEND_PROXY "upgradeToAndCall(address,bytes)" $FROZENDIVIDEND $calldata 

echo >&2 "${0##*/}: info: FrozenDividendProxy inited."

frozenDivId=$(seth --to-bytes32 $(seth --to-hex $(seth --from-ascii "CONTRACT_FROZEN_DIVIDEND")))
seth send $SETTINGSREGISTRY "setAddressProperty(bytes32,address)" $frozenDivId $FROZENDIVIDEND_PROXY 
# UserRoles
USERROLES=$(dapp create UserRoles)
cat $ADDRESSES_FILE | jq --arg key "USERROLES" --arg value "$USERROLES" '.[$key] = $value' | sponge $ADDRESSES_FILE

USERROLES_PROXY=$(dapp create UserRolesProxy)
cat $ADDRESSES_FILE | jq --arg key "USERROLES_PROXY" --arg value "$USERROLES_PROXY" '.[$key] = $value' | sponge $ADDRESSES_FILE
echo >&2 "${0##*/}: info: UserRolesProxy created."

calldata=$(seth calldata "initializeContract()")
seth send $USERROLES_PROXY "upgradeToAndCall(address,bytes)" $USERROLES $calldata 
echo >&2 "${0##*/}: info: UserRolesProxy inited."

frozenDivId=$(seth --to-bytes32 $(seth --to-hex $(seth --from-ascii "CONTRACT_FROZEN_DIVIDEND")))
seth send $SETTINGSREGISTRY "setAddressProperty(bytes32,address)" $frozenDivId $FROZENDIVIDEND_PROXY 
# RolesUpdater
networkId=$(seth --to-uint256 43)
supervisor='0x00a1537d251a6a4c4effAb76948899061FeA47b9'
ROLESUPDATER=$(dapp create RolesUpdater $USERROLES_PROXY $networkId $supervisor)
cat $ADDRESSES_FILE | jq --arg key "ROLESUPDATER" --arg value "$ROLESUPDATER" '.[$key] = $value' | sponge $ADDRESSES_FILE

# TakeBack
TAKEBACK=$(dapp create TakeBack $TOKEN_ERC20_RING $supervisor $networkId)
cat $ADDRESSES_FILE | jq --arg key "TAKEBACK" --arg value "$TAKEBACK" '.[$key] = $value' | sponge $ADDRESSES_FILE

# TakeBack-ring
TAKEBACK=$(dapp create TakeBack $TOKEN_ERC20_RING $supervisor $networkId)
cat $ADDRESSES_FILE | jq --arg key "TAKEBACK" --arg value "$TAKEBACK" '.[$key] = $value' | sponge $ADDRESSES_FILE

# TakeBack-kton
TAKEBACK=$(dapp create TakeBack $TOKEN_ERC20_KTON $supervisor $networkId)
cat $ADDRESSES_FILE | jq --arg key "TAKEBACK" --arg value "$TAKEBACK" '.[$key] = $value' | sponge $ADDRESSES_FILE
