#!/usr/bin/env bash

set -e

. $(PWD)/bin/init

lib="land"

# ropsten
# LANDRESOURCEV6=$(dappCreate "$lib" contracts/LandResourceV6.sol:LandResourceV6)
# seth send -F $OWNER  $LANDRESOURCE_PROXY "upgradeTo(address)" $LANDRESOURCEV6
# if test $(seth call $LANDRESOURCE_PROXY "implementation()(address)") != $LANDRESOURCEV6; then
#   (echo "check migration failed."; exit 1;)
# fi
# echo >&2 "${0##*/}: info: migration finished."

# heco
# donwgrade
# dappUpgrade "$lib" contracts/LandResourceV6.sol:LandResourceV6 "$LANDRESOURCE_PROXY"

# upgrade
# CONTRACT_LANDRS_APOSTLE=$(dappCreate "landrs" src/LandRSApostle.sol:LandRSApostle)
# register "addr" "CONTRACT_LANDRS_APOSTLE" "$CONTRACT_LANDRS_APOSTLE"

# CONTRACT_LANDRS_MINE=$(dappCreate "landrs" src/LandRSMine.sol:LandRSMine)
# register "addr" "CONTRACT_LANDRS_MINE" "$CONTRACT_LANDRS_MINE"

# CONTRACT_LANDRS_BAR=$(dappCreate "landrs" src/LandRSBar.sol:LandRSBar)
# register "addr" "CONTRACT_LANDRS_BAR" "$CONTRACT_LANDRS_BAR"

dappUpgrade "landrs" src/LandRSCore.sol:LandRSCore "$LANDRESOURCE_PROXY"

# mysterioustreasure
# gold=$(loadConf ".land.resourcesPool.gold")
# wood=$(loadConf ".land.resourcesPool.wood")
# water=$(loadConf ".land.resourcesPool.water")
# fire=$(loadConf ".land.resourcesPool.fire")
# earth=$(loadConf ".land.resourcesPool.soil")
# resources=($gold $wood $water $fire $earth)

# for i in {0..4}; do
#   rs="${resources[$i]}"
#   echo "$i" "$rs"
#   seth send $MYSTERIOUSTREASURE_PROXY "setResourcePool(uint,uint)" "$i" "$rs"
# done
