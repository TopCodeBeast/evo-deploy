#!/usr/bin/env bash

set -e

. $(PWD)/bin/init

p() { printf "%-7s %-20s\n" "$1" "$2"; }

# owner=0x0f14341A7f464320319025540E8Fe48Ad0fe5aec
# to=0xa1511E5C683A007056CAa1d9A8D6A37464826280
# gene=39

# for i in {1..2}; do
#   seth send "$CK" "createPromoKitty(uint256,address)" "$(($gene+$i))" "$to"
# done

# for i in {1..2}; do
#   seth send -F "$owner" "$CK" "transfer(address,uint256)" "$to" "$(($gene+$i))"
# done

# tie old ck pet
apostle1=0x2a01000101000102000000000000000100000000000000000000000000000077
strength () {
  land=0x2a0100010100010100000000000000010000000000000000000000000000011e
  resource=0xC5C0f115C05dd10625A5d4d0fAf284100AD56E68
  evo apo-bas strength $apostle1 $resource $land --chain ropsten
}

# seth send $CK "createPromoKitty(uint256,address)" 1 $AUTH
# ckpet=$(seth call $CK "totalSupply()(uint256)")
# echo $ckpet
ckpet=53

# tp=$(seth call $PETBASE_PROXY "getTiedPet(uint256,uint256)" $apostle1 0)
# echo $tp

# mirrorTokenId=0x2a01000101000203800000000000010000000000000000000000000000000035

# p "Before" $(strength)
# seth estimate $PETBASE_PROXY "bridgeInAndTie(address,uint256,uint256)" $CK $ckpet $apostle1
# seth send $PETBASE_PROXY "bridgeInAndTie(address,uint256,uint256)" $CK $ckpet $apostle1
# p "Mid" $(strength)
# seth send $PETBASE_PROXY "untiePetToken(uint256)" "$mirrorTokenId"
# p "After" $(strength)

# seth send $ERC721BRIDGE_PROXY "swapOut721(uint256)" $mirrorTokenId

# # bridge in
approved=$(seth call "$CK" "kittyIndexToApproved(uint256)(address)" "$ckpet")
if test "$approved" != $(seth --to-checksum-address $ERC721BRIDGE_PROXY); then
  seth send "$CK" "approve(address,uint256)" "$ERC721BRIDGE_PROXY" "$ckpet"
fi

tx=$(seth send --async "$ERC721BRIDGE_PROXY" "swapIn721(address,uint256)" "$CK" "$ckpet")
echo "$tx"
echo >&2 -n "${0##*/}: Waiting for transaction receipt..."
block=$(SETH_TICK=true seth receipt "$tx" blockNumber)
block=$(seth --to-hex "$block")
echo >&2

sig="SwapIn(address,uint256,uint256,address)"
keccak=$(seth keccak "$(seth --from-ascii $sig)")
logs=$(seth rpc eth_getLogs -- \
  -n {} \
    -s "${ERC721BRIDGE_PROXY?}" -i address \
    -s "$block"                 -i fromBlock \
    -s "$block"                 -i toBlock \
  -n [] \
    -s "$keccak" -i append \
  -i topics \
  -i append | echo "[$(paste -sd , -)]")
data=$(echo "$logs" | jshon -a -e data -u)
dec=$(seth --abi-decode "f()(address,uint256,bytes32,address)" "$data")
mirrorTokenId=$(echo $dec | cut -d' ' -f 3)
hash=$(echo "$logs" | jshon -a -e transactionHash -u)

if [ "$hash" == "$tx" ]; then
  echo "$tx"
  p  "$mirrorTokenId"      "SwapIn"
else
  echo >&2 "${0##*/}: Transaction failed."
  seth >&2 receipt "$tx"
  exit 1
fi

# tie pet
p "Before" "$(strength)"

seth send $PETBASE_PROXY "tiePetTokenToApostle(uint256,uint256)" "$mirrorTokenId" "$apostle1"
p "Mid" "$(strength)"

seth send $PETBASE_PROXY "untiePetToken(uint256)" "$mirrorTokenId"
p "After" "$(strength)"

## bridge out
seth send $ERC721BRIDGE_PROXY "swapOut721(uint256)" $mirrorTokenId

