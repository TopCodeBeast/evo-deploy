#!/usr/bin/env bash

set -e

. $(PWD)/bin/init

p() { printf "%-7s %-50s %-10s\n" "$1" "$2" "$3"; }

# tos=(
#   0x735182c782CB8e7806F8903dE7913e6880CbF82E
#   0xf422673CB7a673f595852f7B00906408A0b073db
#   0xa1511E5C683A007056CAa1d9A8D6A37464826280
# )
# for i in {1..20}; do
#   seth send "$POLKAPET" "create(uint256,uint256,string,bytes)" 10000000 5 '""' 0x00 
# done
# for to in "${tos[@]}"; do
#   seth send "$POLKAPET" "mint(address,uint256,uint256,bytes)" "$to" 2 5 "0x00"
#   seth send "$POLKAPET" "mint(address,uint256,uint256,bytes)" "$to" 11 5 "0x00"
#   seth send "$POLKAPET" "mint(address,uint256,uint256,bytes)" "$to" 20 5 "0x00"
# done

# bridge in
id=11
seth call "$POLKAPET" "balanceOf(address,uint256)(uint256)"  "$AUTH" "$id"
approved=$(seth call "$POLKAPET" "isApprovedForAll(address,address)(bool)" "$AUTH" "$ERC721BRIDGE_PROXY")
if test "$approved" == false; then
  seth send "$POLKAPET" "setApprovalForAll(address,bool)" "$ERC721BRIDGE_PROXY" true 
fi


tx=$(seth send --async "$ERC721BRIDGE_PROXY" "swapIn1155(address,uint256,uint256)" "$POLKAPET" "$id" 1)
echo "$tx"
echo >&2 -n "${0##*/}: Waiting for transaction receipt..."
block=$(SETH_TICK=true seth receipt "$tx" blockNumber)
block=$(seth --to-hex "$block")
echo >&2

sig="SwapIn(address,uint256,uint256,address)"
keccak=$(seth keccak "$(seth --from-ascii $sig)")
logs=$(seth rpc eth_getLogs -- \
  -n {} \
    -s "${ERC721BRIDGE_PROXY?}" -i address \
    -s "$block"                 -i fromBlock \
    -s "$block"                 -i toBlock \
  -n [] \
    -s "$keccak" -i append \
  -i topics \
  -i append | echo "[$(paste -sd , -)]")
data=$(echo "$logs" | jshon -a -e data -u)
dec=$(seth --abi-decode "f()(address,uint256,bytes32,address)" "$data")
mirrorTokenId=$(echo $dec | cut -d' ' -f 3)
hash=$(echo "$logs" | jshon -a -e transactionHash -u)

if [ "$hash" == "$tx" ]; then
  echo "$tx"
  p "ERC721BRIDGE_PROXY"  "$mirrorTokenId"      "SwapIn"
else
  echo >&2 "${0##*/}: Transaction failed."
  seth >&2 receipt "$tx"
  exit 1
fi

# tie pet

apostle1=0x2a010001010001020000000000000001000000000000000000000000000000a4
strength () {
  land=0x2a0100010100010100000000000000010000000000000000000000000000011e
  resource=0xC5C0f115C05dd10625A5d4d0fAf284100AD56E68
  evo apo-bas strength $apostle1 $resource $land --chain ropsten
}

ppet=$mirrorTokenId
p "Before" "$(strength)" "POLKAPET"

seth send $PETBASE_PROXY "tiePetTokenToApostle(uint256,uint256)" "$ppet" "$apostle1"
p "Mid" "$(strength)" "POLKAPET"

seth send $PETBASE_PROXY "untiePetToken(uint256)" "$ppet"
p "After" "$(strength)" "POLKAPET"

## bridge out
seth send $ERC721BRIDGE_PROXY "swapOut1155(uint256)" $ppet

