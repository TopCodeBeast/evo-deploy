#!/usr/bin/env bash

set -e

. $(PWD)/bin/init

# ownership
# allowlist=($LANDBASE_PROXY $APOSTLEBASE_PROXY $ERC721BRIDGE_PROXY $DRILLBASE_PROXY $ITEMBASE_PROXY)
wards=$(loadAuthConf ".common.objectOwnership.wards | .[]")
sigs=$(loadAuthConf ".common.objectOwnership.sigs | .[]")
OBJECTOWNERSHIPV4_AUTHORITY=$(dappAuth "ObjectOwnership" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$OBJECTOWNERSHIP_PROXY" "$OBJECTOWNERSHIPV4_AUTHORITY"

# dillbase
wards=$(loadAuthConf ".furnace.drillBase.wards | .[]")
sigs=$(loadAuthConf ".furnace.drillBase.sigs | .[]")
DRILLBASE_AUTHORITY=$(dappAuth "DrillBase" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$DRILLBASE_PROXY" "$DRILLBASE_AUTHORITY"

# TokenLocationAuthority
wards=$(loadAuthConf ".common.tokenLocation.wards | .[]")
sigs=$(loadAuthConf ".common.tokenLocation.sigs | .[]")
TOKENLOCATION_AUTHORITY=$(dappAuth "TokenLocation" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs" )
setAuth "$TOKENLOCATION_PROXY" "$TOKENLOCATION_AUTHORITY"

# TokenUseAuthority
wards=$(loadAuthConf ".common.tokenUse.wards | .[]")
sigs=$(loadAuthConf ".common.tokenUse.sigs | .[]")
TOKENUSE_AUTHORITY=$(dappAuth "TokenUse" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$TOKENUSE_PROXY" "$TOKENUSE_AUTHORITY"

# MintAndBurnAuthority
wards=$(loadAuthConf ".common.mintAndBurn.wards | .[]")
sigs=$(loadAuthConf ".common.mintAndBurn.sigs | .[]")
MINTANDBURN_AUTHORITY_ELEMENT=$(dappAuth "MintAndBurn" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")

setAuth "$TOKEN_ERC20_GOLD" "$MINTANDBURN_AUTHORITY_ELEMENT"
setAuth "$TOKEN_ERC20_WOOD" "$MINTANDBURN_AUTHORITY_ELEMENT"
setAuth "$TOKEN_ERC20_WATER" "$MINTANDBURN_AUTHORITY_ELEMENT"
setAuth "$TOKEN_ERC20_FIRE" "$MINTANDBURN_AUTHORITY_ELEMENT"
setAuth "$TOKEN_ERC20_SOIL" "$MINTANDBURN_AUTHORITY_ELEMENT"

# # ClockAuctionAuthority
wards=$(loadAuthConf ".apostle.clockAuction.wards | .[]")
sigs=$(loadAuthConf ".apostle.clockAuction.sigs | .[]")
CLOCKAUCTION_AUTHORITY_APOSTLE=$(dappAuth "ApostleClockAuction" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$APOSTLECLOCKAUCTION_PROXY" "$CLOCKAUCTION_AUTHORITY_APOSTLE"

# ApostleBaseAuthorityV2
# Pet
# APOSTLEBASEV2_AUTHORITY=$(dapp create ApostleBaseAuthorityV2 [$GEN0APOSTLE_PROXY,$SIRINGCLOCKAUCTION_PROXY,$PETBASE_PROXY,$TOKENUSE_PROXY])
wards=$(loadAuthConf ".apostle.base.wards | .[]")
sigs=$(loadAuthConf ".apostle.base.sigs | .[]")
APOSTLEBASEV2_AUTHORITY=$(dappAuth "ApostleBase" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$APOSTLEBASE_PROXY" "$APOSTLEBASEV2_AUTHORITY"

# UserPointsAuthority
wards=$(loadAuthConf ".common.userPoints.wards | .[]")
sigs=$(loadAuthConf ".common.userPoints.sigs | .[]")
USERPOINTS_AUTHORITY=$(dappAuth "UserPoints" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$USERPOINTS_PROXY" "$USERPOINTS_AUTHORITY"

# LandBaseAuthority
operator=$(loadConf ".land.operator")
wards=$(loadAuthConf ".land.base.wards | .[]")
sigs=$(loadAuthConf ".land.base.sigs | .[]")
LANDBASE_AUTHORITY=$(dappAuth "LandBase" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
seth send $LANDBASE_AUTHORITY "rely(address)" "$operator"
setAuth "$LANDBASE_PROXY" "$LANDBASE_AUTHORITY"

# BancorExchangeAuthority
# BANCOREXCHANGE_AUTHORITY=$(dapp create BancorExchangeAuthority [$CLOCKAUCTION_PROXY])
# seth send $BANCOREXCHANGE "setAuthority(address)" $BANCOREXCHANGE_AUTHORITY

# ClockAuctionAuthority
wards=$(loadAuthConf ".market.clockAuction.wards | .[]")
sigs=$(loadAuthConf ".market.clockAuction.sigs | .[]")
CLOCKAUCTION_AUTHORITY_MARKET=$(dappAuth "LandClockAuction" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$CLOCKAUCTION_PROXY" "$CLOCKAUCTION_AUTHORITY_MARKET"

# # UserRolesAuthority
# USERROLES_AUTHORITY=$(dapp create UserRolesAuthority [$ROLESUPDATER])
# addAddress "USERROLES_AUTHORITY" "$USERROLES_AUTHORITY"
# seth send $USERROLES_PROXY "setAuthority(address)" $USERROLES_AUTHORITY

# MintAndBurnAuthority-kton
# MINTANDBURN_AUTHORITY_KTON=$(dapp create MintAndBurnAuthority [$GRINGOTTSBANK_PROXY,$DIVIDENDPOOL_PROXY])
# addAddress "MINTANDBURN_AUTHORITY_KTON" "$MINTANDBURN_AUTHORITY_KTON"
# seth send $TOKEN_ERC20_KTON "setAuthority(address)" $MINTANDBURN_AUTHORITY_KTON

# Pet
# # ERC721AdaptorAuthority
# ERC721ADAPTOR_AUTHORITY=$(dapp create src/common-contracts/ERC721AdaptorAuthority.f.sol:ERC721AdaptorAuthority [$ERC721BRIDGE_PROXY])
# addAddress "ERC721ADAPTOR_AUTHORITY" "$ERC721ADAPTOR_AUTHORITY"
# seth send $ERC721ADAPTOR_PROXY "setAuthority(address)" $ERC721ADAPTOR_AUTHORITY

# # ERC721BridgeAuthority
# ERC721BRIDGE_AUTHORITY=$(dapp create src/apostle/ERC721BridgeAuthority.f.sol:ERC721BridgeAuthority [$PETBASE_PROXY])
# addAddress "ERC721BRIDGE_AUTHORITY" "$ERC721BRIDGE_AUTHORITY"
# seth send $ERC721BRIDGE_PROXY "setAuthority(address)" $ERC721BRIDGE_AUTHORITY


# MysteriousTreasure
wards=$(loadAuthConf ".land.mysteriousTreasure.wards | .[]")
sigs=$(loadAuthConf ".land.mysteriousTreasure.sigs | .[]")
MYSTERIOUSTREASURE_AUTHORITY=$(dappAuth "MysteriousTreasure" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$MYSTERIOUSTREASURE_PROXY" "$MYSTERIOUSTREASURE_AUTHORITY"


# LandResourceAuthority
wards=$(loadAuthConf ".land.resource.wards | .[]")
sigs=$(loadAuthConf ".land.resource.sigs | .[]")
LANDRESOURCE_AUTHORITY=$(dappAuth "LandResource" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$LANDRESOURCE_PROXY" "$LANDRESOURCE_AUTHORITY"

# PVE
wards=$(loadAuthConf ".pve.team.wards | .[]")
sigs=$(loadAuthConf ".pve.team.sigs | .[]")
PVETEAM_AUTHORITY=$(dappAuth "PveEntry" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$PVETEAM_PROXY" "$PVETEAM_AUTHORITY"

wards=$(loadAuthConf ".pve.material.wards | .[]")
sigs=$(loadAuthConf ".pve.material.sigs | .[]")
MATERIAL_AUTHORITY=$(dappAuth "PveMaterial" common-contracts contracts/Authority.sol:Authority "$wards" "$sigs")
setAuth "$MATERIAL_PROXY" "$MATERIAL_AUTHORITY"
